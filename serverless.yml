service: production-ready-api-demo

provider:
  name: aws
  runtime: nodejs18.x
  architecture: arm64
  stage: ${opt:stage, 'prod'} # Default to production
  region: ${opt:region, 'eu-north-1'}
  memorySize: ${opt:memory, 1024}
  timeout: 10
  logRetentionInDays: 7
  versionFunctions: false
  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  stackTags:
    Usage: ${self:service}
  tags:
    Usage: ${self:service}
  apiGateway:
    minimumCompressionSize: 1024

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-plugin-aws-alerts
  - serverless-api-gateway-throttling

package:
  individually: true

custom:
  config:
    betaVersion: 2
    emailRecipient: your-email@provider.com # Set this to your email
  apiGatewayThrottling:
    maxRequestsPerSecond: 50
    maxConcurrentRequests: 50
  alerts:
    dashboards: false
    stages:
      - prod
    topics:
      alarm:
        topic: ${self:service}-${self:provider.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${self:custom.config.emailRecipient}
    definitions:
      authErrors:
        metric: authErrors
        threshold: 10
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        pattern: '{$.error IS TRUE}'
      clientErrors:
        metric: clientErrors
        threshold: 10
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        pattern: '{$.httpStatusCode >= 400 && $.httpStatusCode < 500}'
      integrationErrors:
        metric: integrationErrors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        pattern: '{$.error IS TRUE && $.message = "Error when calling API*"}'
      latencyErrors:
        namespace: 'AWS/Lambda'
        metric: Duration
        threshold: 7500
        statistic: Average
        period: 300
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
      serverErrors:
        metric: serverErrors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        pattern: '{$.httpStatusCode >= 500 && $.httpStatusCode < 600}'
      timeoutErrors:
        metric: timeoutErrors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        pattern: '{$.error IS TRUE && $.message = "Task timed out"}'

functions:
  Authorizer:
    handler: src/adapters/Authorizer.handler
    description: ${self:service} authorizer
    alarms:
      - authErrors
  Greet:
    handler: src/adapters/Greet.handler
    description: Greet the user
    events:
      - http:
          method: POST
          path: /greet
          cors: true
          request:
            schemas:
              application/json: ${file(schema/greet.validator.json)}
    alarms:
      - clientErrors
      - integrationErrors
      - latencyErrors
      - serverErrors
      - timeoutErrors
    environment:
      BETA_VERSION: ${self:custom.config.betaVersion}